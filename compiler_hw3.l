/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdlib.h>
#include <string.h>

extern YYSTYPE yylval; //YYSTYPE
char buf[256];
int scope_state=0;
int CanDump=0;
int PrintSemeticError=0;
int PrintSytax=0;

struct symbol{
	int index;
	char *name; 
	char entry_type[15];
	char data_type[7];
	int scope_level;
	char *formal_parameters;
	struct symbol * next;
    struct symbol * next_index;
};
extern struct symbol * table[30][30];
extern struct symbol * index_stack[30];
char type_temp[10];
char se_error_buff[30];
char sy_error_buff[30];

extern int dump_symbol(int);
extern void semantic_error(char *);
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, 256 - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */

"++"    { CONCAT return INC_OP;}
"--"    { CONCAT return DEC_OP;}

 /* Relational */

">="	{ CONCAT  return GE_OP;}
"<="	{ CONCAT  return LE_OP;}
"=="	{ CONCAT  return EQ_OP;}
"!="	{ CONCAT  return NE_OP;}

 /* Assignment */

"+="	{  CONCAT  return ADD_ASSIGN;}
"-="	{  CONCAT  return DEC_ASSIGN;}
"*="	{  CONCAT  return MUL_ASSIGN;}
"/="	{  CONCAT  return DIV_ASSIGN;}
"%="	{  CONCAT  return MOD_ASSIGN;}

 /* Logical */
"&&"	{  CONCAT  return AND_OP;}
"||"	{  CONCAT  return OR_OP;}
"!"		{  CONCAT  return '!';}
">"		{ CONCAT return '>';}
"<"		{ CONCAT return '<'; }
"="		{ CONCAT return '='; }
"("		{ CONCAT return '(';}
")"		{ CONCAT return ')';}
"{"		{ CONCAT scope_state++; return '{'; }
"}"		{  CONCAT return '}';}
"["		{  CONCAT return '[';}
"]"		{  CONCAT return ']';}
","		{ CONCAT return ','; }
"+"     { CONCAT return '+'; }
"-" 	{ CONCAT return '-'; }
"*" 	{ CONCAT return '*'; }
"/" 	{ CONCAT return '/'; }
"%"     { CONCAT return '%'; }
 /* Print Keywords */	
"print"		{ CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT return IF; }
"else"		{ CONCAT  return ELSE; }
"for"		{ CONCAT  return FOR; }
"while"		{ CONCAT  return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT  char * t = malloc(10);strcpy(t,yytext);yylval.string=t;  return VOID;}
"int"		{ CONCAT  char * t = malloc(10);strcpy(t,yytext);yylval.string=t;  return INT; }
"float"  	{ CONCAT  char * t = malloc(10);strcpy(t,yytext);yylval.string=t;  return FLOAT; } 
"string"  	{ CONCAT  char * t = malloc(10);strcpy(t,yytext);yylval.string=t;  return STRING; }
"bool"  	{ CONCAT  char * t = malloc(10);strcpy(t,yytext);yylval.string=t; return BOOL;}

 /* boolean Keywords */
"true"      {  CONCAT return I_CONST;}
"false"     {  CONCAT return I_CONST;}

"return"    { CONCAT return RETURN;}

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT ;}
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT return S_CONST;}
<STRING_STATE>[^"]*		{ CONCAT char * t = malloc(20);strcpy(t,yytext);yylval.string=t;}

 /* Number Constant */
{integer}	{CONCAT  char * t = malloc(10);strcpy(t,yytext);yylval.string=t; return(I_CONST);}
{float}	    { CONCAT char * t = malloc(10);strcpy(t,yytext);yylval.string=t;return(F_CONST);}

 /* C type Comment */
"/*"				{ BEGIN COMMENT; CONCAT  }
<COMMENT>[^*\n]+	{  CONCAT  }
<COMMENT>\n			{  CONCAT  }
<COMMENT>"*"		{  CONCAT  }
<COMMENT>"*/"		{  CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT }

 /* Variable ID */
 {id}       {  CONCAT char * t = malloc(10);strcpy(t,yytext);yylval.string=t; 
                        return(ID);}

 /* others */

[;]         {  CONCAT return ';';}
[\n]        {  CONCAT //if(buf[0]!='\n')printf("%d: %s",yylineno,buf);
                       // else printf("%d:\n",yylineno);
                if(CanDump){
                    dump_symbol(scope_state+1);
                    CanDump=0;
                }
                if(PrintSemeticError){
                    semantic_error(se_error_buff);
                    memset(se_error_buff,0,strlen(se_error_buff));
                    PrintSemeticError=0;
                }
                memset(buf,0,strlen(buf));
            }
[ \t]		{ CONCAT} /* Ignore */
[^ \t\n] 	{ CONCAT} /* Ignore other charactor sets */
<<EOF>>     {return 0;}

%%

int yywrap()
{
    return 1;
}
